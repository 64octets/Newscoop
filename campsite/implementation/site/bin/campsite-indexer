#!/usr/bin/php
<?php
/**
 * @package Campsite
 *
 * @author Holman Romero <holman.romero@gmail.com>
 * @copyright 2007 MDLF, Inc.
 * @license http://www.gnu.org/licenses/gpl.txt
 * @version $Revision$
 * @link http://www.campware.org
 */


// Global keywords hash
$GLOBALS['kwd_hash'] = array();

// Max length for a keyword
define('MAX_KWD', 69);


/**
 * Keyword functions
 */

function init_hash()
{
    global $kwd_hash;
    
    $kwd_hash = array();
} // fn init_hash


function add_kwd($p_kwd, $p_length)
{
    global $kwd_hash;
    
    $p_kwd = trim($p_kwd);
    if (!isset($kwd_hash[$p_kwd])) {
    	$kwd_hash[$p_kwd] = false;
    }
} // fn add_kwd


function set_html_tag(&$p_inHTMLTag, $p_char)
{
	if ($p_char == '<') {
		$p_inHTMLTag++;
	}
	if ($p_char == '>') {
		$p_inHTMLTag = $p_inHTMLTag > 0 ? $p_inHTMLTag - 1 : 0;
	}
}


function parse_kwd($p_kwd, $p_isHTML = true)
{
    $t = array(
/*             0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 */
/*  00-19  */  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
/*  20-39  */  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
/*  40-59  */  0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
/*  60-79  */  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/*  80-99  */  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1,
/* 100-119 */  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/* 120-139 */  1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/* 140-159 */  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/* 160-179 */  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/* 180-199 */  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1,
/* 200-219 */  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/* 220-239 */  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
/* 240-255 */  1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
               );

    $nonWordForming = array(36, 45, 64, 95, 127);

    $inHTMLTag = 0;
    if (!empty($p_kwd)) {
        $kwd_l = strlen($p_kwd);
        $q = null;
        $x = 0;
        $l = 0;
        for ($q = $p_kwd; $x < $kwd_l;) {
            $w_l = 0;
            $validWord = false;
            
            while ($x < $kwd_l && $t[ord(substr($q, $x, 1))]) {
            	if ($p_isHTML) {
            		set_html_tag($inHTMLTag, $q[$x]);
            	}
            	$char = substr($q, $x, 1);
            	if (array_search(ord($char), $nonWordForming) === false
            	&& (ord($char) < 128 || ord($char) > 191)) {
            		$validWord = true;
            	}
            	$x++;
                $w_l++;
            }

            if ($w_l > 1 && $validWord) {
            	if ($inHTMLTag) {
            		continue;
            	}
                $word = trim(substr($q, $l, $w_l), ' -');
                if (is_numeric($word) && $word < 100) {
                	continue;
                }
                if (preg_match('/[\w]/', $word) == 0) {
                	continue;
                }
                add_kwd($word, mymin($w_l, MAX_KWD));
            } else {
                $l = $x;
                while ($l < $kwd_l && !$t[ord(substr($q, $l, 1))]) {
                	if ($p_isHTML) {
                		set_html_tag($inHTMLTag, $q[$l]);
                	}
                	$l++;
                }
                $x = $l;
            }
        }
    }
} // fn parse_kwd



/**
 * Gather functions
 */


function build_kwd_list($p_article)
{
    parse_kwd($p_article['Keywords'], false);
    parse_kwd($p_article['Name'], false);
    parse_kwd($p_article['AuthorName'], false);
    
    if (empty($p_article['Type'])) {
        return;
    }

    $sql_query = 'SELECT * FROM X' . $p_article['Type']
        . ' WHERE NrArticle = ' . $p_article['Number']
        . ' AND IdLanguage = ' . $p_article['IdLanguage'];
    $sql_result = mysql_query($sql_query);
    if (!$sql_result) {
    	exit_error('Error getting article: ' . mysql_error());
    }

    $row = mysql_fetch_row($sql_result);

    if (!empty($row)) {
        $nr_of_fields = mysql_num_fields($sql_result);
        for ($i = 0; $i < $nr_of_fields; $i++) {
            $field = mysql_fetch_field($sql_result, $i);
            if (substr($field->name, 0, 1) == 'F') {
                if ($row[$i]) {
                    parse_kwd($row[$i]);
                }
            }
        }
    }

    mysql_free_result($sql_result);
} // fn build_kwd_list


function gather($p_conf_dir)
{
	global $g_silent, $g_verbose;

    // connects to the database server
    db_connect($p_conf_dir);

    // selects articles not yet indexed
    $sql_query = 'SELECT IdPublication, NrIssue, NrSection, Number, '
        . 'IdLanguage, Published, Type, Keywords, Name, '
        . "TRIM(CONCAT(first_name, ' ', last_name)) AS AuthorName \n"
        . "FROM Articles as a LEFT JOIN Authors as auth \n"
        . "  ON a.fk_default_author_id = auth.Id \n"
        . "WHERE IsIndexed = 'N' AND Published = 'Y' ORDER BY Number";
    $sql_result = mysql_query($sql_query);
    if (!$sql_result) {
        exit_error('Error selecting articles not yet indexed: ' . mysql_error());
    }
    
    $nr_art = 0;
    $nr_new = 0;
    $nr_word = 0;

    while($row = mysql_fetch_array($sql_result, MYSQL_ASSOC)) {
        $article['IdPublication'] = ($row['IdPublication']) ? (int)$row['IdPublication'] : 0;
        $article['NrIssue'] = ($row['NrIssue']) ? (int)$row['NrIssue'] : 0;
        $article['NrSection'] = ($row['NrSection']) ? (int)$row['NrSection'] : 0;
        $article['Number'] = ($row['Number']) ? (int)$row['Number'] : 0;
        $article['IdLanguage'] = ($row['IdLanguage']) ? (int)$row['IdLanguage'] : 0;
        $article['Published'] = ($row['Published'] == 'Y') ? true : false;
        $article['Type'] = ($row['Type']) ? $row['Type'] : '';
        $article['Keywords'] = ($row['Keywords']) ? $row['Keywords'] : '';
        $article['Name'] = ($row['Name']) ? $row['Name'] : '';
        $article['AuthorName'] = $row['AuthorName'];

        // deletes from index
        $sql_query = 'DELETE FROM ArticleIndex '
            . 'WHERE IdPublication = ' . $article['IdPublication']
            . ' AND IdLanguage = ' . $article['IdLanguage']
            . ' AND NrIssue = ' . $article['NrIssue']
            . ' AND NrSection = ' . $article['NrSection']
            . ' AND NrArticle = ' . $article['Number'];
        if (!mysql_query($sql_query)) {
            exit_error('Error deleting old index: ' . mysql_error());
        }

        $nr_art++;

        init_hash();
        build_kwd_list($article);
        $existing_words = array();

        global $kwd_hash;

        foreach ($kwd_hash as $keyword=>$isSet) {
            if (empty($keyword)) {
                continue;
            }

            $nr_word++;
            
            if (isset($existing_words[$keyword])) {
            	$kwd_id = $existing_words[$keyword];
            } else {
            	$sql_query = 'SELECT Id FROM KeywordIndex '
            	. "WHERE Keyword = '" . mysql_real_escape_string($keyword) ."'";
            	$sql_res = mysql_query($sql_query);
            	if (!$sql_res) {
            		exit_error('Error getting KeywordId: ' . mysql_error());
            	}

            	$drow = mysql_fetch_array($sql_res, MYSQL_ASSOC);
            	$kwd_id = (!empty($drow) && !empty($drow['Id'])) ? $drow['Id'] : 0;
            	mysql_free_result($sql_res);
            }
            if ($kwd_id == 0) {
                if (!mysql_query('LOCK TABLE KeywordIndex WRITE')) {
                    exit_error('Error locking table KeywordIndex: '
                               . mysql_error());
                }
                $sql_query = 'SELECT MAX(Id) AS Id FROM KeywordIndex';
                $sql_res = mysql_query($sql_query);
                if (!$sql_res) {
                    exit_error('Error reading the last id: ' . mysql_error());
                }

                $drow = mysql_fetch_array($sql_res, MYSQL_ASSOC);
                mysql_free_result($sql_res);
                if (!empty($drow) && !empty($drow['Id'])) {
                    $kwd_id = $drow['Id'] + 1;
                } else {
                    $kwd_id = 1;
                }

                // inserts in keyword list
                $sql_query = 'INSERT INTO KeywordIndex '
                    . "SET Keyword = '".mysql_real_escape_string($keyword)."', "
                    . 'Id = '.$kwd_id;
                $sql_res = mysql_query($sql_query);
                if (!$sql_res) {
                    exit_error('Error adding keyword: ' . mysql_error());
                }

                if (!mysql_query('UNLOCK TABLES')) {
                    exit_error('Error unlocking table KeywordIndex: '
                               . mysql_error());
                }

                $nr_new++;
            }
            $existing_words[$keyword] = $kwd_id;

            // inserts in article index
            $sql_query = 'INSERT IGNORE INTO ArticleIndex '
                . 'SET IdPublication = ' . $article['IdPublication']
                . ', IdLanguage = ' . $article['IdLanguage']
                . ', IdKeyword = ' . $kwd_id
                . ', NrIssue = ' . $article['NrIssue']
                . ', NrSection = ' . $article['NrSection']
                . ', NrArticle = ' . $article['Number'];
            if (!mysql_query($sql_query)) {
                exit_error('Error adding article to index: ' . mysql_error());
            }
            out_msg("Found $nr_art articles, $nr_word words of which $nr_new new.\r", true, false);
        }

        unset($article['Name']);
        unset($article['Keywords']);
        unset($article['Type']);

        $sql_query = "UPDATE Articles SET IsIndexed = 'Y' "
            . 'WHERE IdPublication = ' . $article['IdPublication']
            . ' AND NrIssue = ' . $article['NrIssue']
            . ' AND NrSection = ' . $article['NrSection']
            . ' AND Number = ' . $article['Number']
            . ' AND IdLanguage = ' . $article['IdLanguage'];
        if (!mysql_query($sql_query)) {
            exit_error('Error updating article: ' . mysql_error());
        }
    }

    if (($nr_art > 0 || $nr_word > 0 || $nr_new > 0) && !$g_silent) {
        out_msg('Campsite index: '.$nr_art.' articles, '
                .$nr_word.' words processed, '
                .$nr_new." of them are new.");
    }

    mysql_close();

    return 0;
} // fn gather


function db_connect($p_conf_dir)
{
    is_valid_conf_dir($p_conf_dir);

    require_once($p_conf_dir . '/database_conf.php');
    mysql_connect($Campsite['DATABASE_SERVER_ADDRESS'],
                  $Campsite['DATABASE_USER'],
                  $Campsite['DATABASE_PASSWORD']) or
        die('Could not connect: ' . mysql_error());
    mysql_select_db($Campsite['DATABASE_NAME']);
    mysql_query("SET NAMES 'utf8'");
} // fn db_connect


function is_valid_conf_dir($p_conf_dir)
{
    try {
        if (!is_dir($p_conf_dir)) {
            throw new Exception('Invalid configuration directory ' . $p_conf_dir);
        }
        return true;
    } catch (Exception $e) {
        exit_error('Error: ' . $e->getMessage());
    }
} // fn isValidConfDir


function mymin($p_a, $p_b)
{
    return ($p_a < $p_b) ? $p_a : $p_b;
} // fn mymin


function out_msg($p_msg, $p_ifVerboseSet = false, $p_newLine = true)
{
    global $g_silent, $g_verbose;
    if (!$g_silent && ($g_verbose || !$p_ifVerboseSet)) {
        echo "$p_msg" . ($p_newLine ? "\n" : '');
    }
}


function exit_error($p_errMsg, $p_ifVerboseSet = false)
{
    out_msg($p_errMsg, $p_ifVerboseSet);
    exit(1);
}


function usage()
{
    out_msg("Usage: campsite-indexer [options]\n"
            ."Options:\n"
            ."\t--conf_dir=[configuration_dir]: Host name of the MySQL Server.\n"
            ."\t--silent: The script will not display any message\n"
            ."\t\t(has precedence over --verbose).\n"
            ."\t--verbose: The script will display detailed information.\n"
            ."\t--help: Display this information.");
} // fn usage


$g_silent = false;
$g_verbose = false;
$conf_dir = '';

// gets the arguments from command line, if any
for ($i = 1; isset($GLOBALS['argv'][$i]); $i++) {
    $option = explode('=', $GLOBALS['argv'][$i]);
    switch ($option[0]) {
    	case '--conf_dir':
    		$conf_dir = !empty($option[1]) ? rtrim($option[1], '/') : '';
    		if (empty($conf_dir)) {
    			out_msg("Configuration directory not specified!");
    			usage();
    			exit(1);
    		}
    		break;
    	case '--silent':
    		$g_silent = true;
    		break;
    	case '--verbose':
    		$g_verbose = true;
    		break;
    	case '--help':
    		usage();
    		exit(0);
    	default:
    		out_msg("Invalid option '" . $option[0] . "'!");
    		usage();
    		exit(1);
    }
}
$g_verbose = !$g_silent && $g_verbose;
if (empty($conf_dir)) {
    $bin_dir = dirname(__FILE__);
    $conf_dir = preg_replace('/bin$/', 'conf', $bin_dir);
}
$GLOBALS['g_campsiteDir'] = dirname($conf_dir);

// runs the script
gather($conf_dir);

?>

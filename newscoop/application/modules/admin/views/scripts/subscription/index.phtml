<?php $this->placeholder('title')->set(getGS('Subscriptions')); ?>

<script type="text/template" id="subscription-list-template">
<a id="add-new" href="#subscription/new"><?php putGS('Add subscription'); ?></a>
<table id="subscription-table">
    <thead>
        <tr>
            <th><?php putGS('Publication'); ?></th>
            <th><?php putGS('Left to pay'); ?></th>
            <th><?php putGS('Type'); ?></th>
            <th><?php putGS('Active'); ?></th>
            <th><?php putGS('Delete'); ?></th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>
</script>

<script type="text/template" id="subscription-row-template">
<td class="publication"><a href="<%= link.href %>"><%= publication.name %></a></td>
<td class="toPay"><input type="number" step="0.01" min="0" value="<%= toPay.toFixed(1) %>" /></td>
<td class="type"><%= type === 'P' ? <?php echo json_encode(getGS('Paid')), ':', json_encode(getGS('Trial')); ?> %></td>
<td class="active"><%= active ? <?php echo json_encode(getGS('Yes')), ':', json_encode(getGS('No')); ?> %></td>
<td class="delete"><button><?php putGS('Delete'); ?></button></td>
</script>

<script type="text/template" id="new-subscription-template">
<form method="POST" id="add-view-form">
<dl>
    <dt><?php putGS('Publication:'); ?></dt>
    <dd><select name="publication" id="pubs"></select></dd>
</dl>
<dl>
    <dt><?php putGS('Languages:'); ?></dt>
    <dd>
        <input type="checkbox" name="individual_languages" value="true" id="il" checked /> <label for="il"><?php putGS('Individual languages'); ?></label><br />
        <select name="languages" size="5" multiple></select>
    </dd>
</dl>
<dl>
    <dt><?php putGS('Sections'); ?></dt>
    <dd>
        <input type="radio" name="add_sections" value="true" checked id="sections_1" /> <label for="sections_1"><?php putGS('Add sections now'); ?></label>
        <input type="radio" name="add_sections" value="false" id="sections_2" /> <label for="sections_2"><?php putGS('Add sections later'); ?></label>
    </dd>
</dl>
<dl>
    <dt><?php putGS('Start'); ?></dt>
    <dd><input type="date" name="start_date" value="<?php echo date('Y-m-d'); ?>" /></dd>
</dl>
<dl>
    <dt><?php putGS('Subscription type:'); ?></dt>
    <dd><select name="type">
        <option value="PN"><?php putGS('Paid (confirm payment now)'); ?></option>
        <option value="P"><?php putGS('Paid (payment will be confirmed later)'); ?></option>
        <option value="T"><?php putGS('Trial'); ?></option>
    </select></dd>
</dl>
<dl>
    <dt><?php putGS('Days:'); ?></dt>
    <dd><input type="number" name="days" min="1" value="1" /></dd>
</dl>
<dl>
    <dt></dt>
    <dd><input type="checkbox" name="active" value="1" checked id="active" /> <label for="active"><?php putGS('Active'); ?></label></dd>
</dl>
<dl>
    <dt></dt>
    <dd><button><?php putGS('Save'); ?></button></dd>
</dl>
</form>
</script>

<div id="app">
</div>

<script type="text/javascript">
(function($) {
    var Publication = Backbone.Model.extend({
    });

    var PublicationCollection = Backbone.Collection.extend({model: Publication});

    var Subscription = Backbone.Model.extend({
        initialize: function(attributes) {
            this.sections = new SectionCollection(attributes.sections);
        },

        defaults: {
            publication: null,
            start_date: <?php echo json_encode(date('Y-m-d')); ?>,
            type: '',
            days: 1,
            active: true,
            user: <?php echo json_encode($this->user); ?>,
            toPay: 0.0,
            add_sections: false,
            individual_languages: false,
            languages: [],
            active: false
        },

        parse: function(response) {
            this.sections.reset(response.sections);
            return response;
        },

        validate: function(attrs) {
            if (!attrs.start_date) {
                throw "Provide start date";
            }

            if (!attrs.days || attrs.days < 1) {
                throw "Days must be > 0";
            }

            if (attrs.individual_languages && attrs.languages.length == 0) {
                throw "You must select a languages for individual subscription.";
            }
        }
    });

    var SubscriptionCollection = Backbone.Collection.extend({
        model: Subscription,
        url: <?php echo json_encode($this->url(array('module' => 'admin', 'controller' => 'subscription-rest'), 'rest')); ?>
    });

    var Section = Backbone.Model.extend({
    });

    var SectionCollection = Backbone.Collection.extend({
        model: Section
    });

    var SubscriptionRowView = Backbone.View.extend({
        tagName: "tr",

        events: {
            'click .active': 'toggleActive',
            'click .delete': 'delete',
            'blur input': 'saveToPay'
        },

        initialize: function() {
            this.model.bind('change', this.render, this);
            this.model.bind('sync', this.render, this);
            this.template = _.template($('#subscription-row-template').html());
        },

        render: function() {
            $(this.el).html(this.template(this.model.toJSON()));

            if (this.model.get('active')) {
                $(this.el).addClass('active');
            } else {
                $(this.el).removeClass('active');
            }

            return this;
        },

        toggleActive: function() {
            this.model.save({active: !this.model.get('active')});
        },

        delete: function() {
            this.model.destroy();
            this.collection.remove(this.model);
        },

        saveToPay: function() {
            this.model.save({
                toPay: parseFloat($(this.el).find('input').val())
            });
        }
    });

    var TableView = Backbone.View.extend({
        initialize: function() {
            this.collection.bind('remove', this.render, this);
            this.collection.bind('add', this.render, this);
            this.template = _.template($('#subscription-list-template').html());
        },

        render: function() {
            $(this.el).html(this.template());

            var collection = this.collection;
            var tbody = $(this.el).find('tbody').empty();
            this.collection.each(function(subscription) {
                view = new SubscriptionRowView({model: subscription, collection: collection});
                tbody.append(view.render().el);
            });

            if (this.collection.length === 0) {
                tbody.html('<tr><td colspan="5">' + <?php echo json_encode(getGS('No subscriptions')); ?> + '</td></tr>');
            }

            return this;
        }
    });

    var PublicationSelectView = Backbone.View.extend({
    });


    var EditView = Backbone.View.extend({
        events: {
            'click #save-sections': 'save'
        },

        initialize: function() {
            this.template = _.template($('#edit-subscription-template').html());

            this.model.sections.bind('add', this.renderTable, this);
            this.model.sections.bind('remove', this.renderTable, this);
            this.model.sections.bind('reset', this.renderTable, this);
        },

        render: function() {
            $(this.el).html(this.template(this.model.toJSON()));
            this.renderTable();
            return this;
        },

        renderTable: function() {
            var table = $(this.el).find('tbody').empty();
            var sections = this.model.sections;
            this.model.sections.each(function(section) {
                var view = new SectionView({model: section, sections: sections});
                table.append(view.render().el);
            });
        },

        save: function() {
            this.model.save({sections: this.model.sections.toJSON()});
            window.router.navigate('', true);
        }
    });

    var AddView = Backbone.View.extend({
        events: {
            'click button': 'save',
            'change #pubs': 'renderLanguages',
            'change #il': 'toggleLanguages'
        },

        initialize: function() {
            this.template = _.template($('#new-subscription-template').html());
        },

        render: function(publications) {
            this.options.publications = publications;

            $(this.el).html(this.template());

            var select = $(this.el).find('select[name="publication"]');
            this.options.publications.each(function(publication) {
                select.append($('<option />').attr('value', publication.get('id')).text(publication.get('name')));
            });

            this.renderLanguages();

            return this;
        },

        renderLanguages: function() {
            var select = $(this.el).find('select[name="languages"]').empty();
            var selectedId = $(this.el).find('select[name="publication"]').val();
            this.options.publications.each(function(publication) {
                if (publication.get('id') == selectedId) {
                    _.each(publication.get('languages'), function(language) {
                        select.append($('<option />').attr('value', language.id).text(language.name));
                    });
                }
            });
        },

        save: function(e) {
            e.preventDefault();

            try {
                window.subscriptions.create({
                    publication: parseInt($(this.el).find('select[name="publication"]').val()),
                    active: $(this.el).find('input[name="active"]:checked').size() == 1,
                    start_date: $(this.el).find('input[name="start_date"]').val(),
                    type: $(this.el).find('select[name="type"]').val(),
                    days: parseInt($(this.el).find('input[name="days"]').val()),
                    add_sections: $(this.el).find('input[name="add_sections"]:checked').val() == 'true',
                    individual_languages: $(this.el).find('input[name="individual_languages"]:checked').val() == 'true',
                    languages: $(this.el).find('select[name="languages"]').val() || []
                }, {wait: true});

                router.navigate('', true);
            } catch (error) {
                alert(error);
            }
        },

        toggleLanguages: function(e) {
            if (e.target.checked) {
                $(this.el).find('select[name="languages"]').show();
            } else {
                $(this.el).find('select[name="languages"]').hide();
            }
        }
    });

    var SectionView = Backbone.View.extend({
        tagName: "tr",

        events: {
            'click button.delete': 'delete'
        },

        initialize: function() {
            this.template = _.template($('#section-row-template').html());
        },

        render: function() {
            $(this.el).html(this.template(this.model.toJSON()));
            return this;
        },

        delete: function() {
            this.options.sections.remove(this.model);
            this.remove();
        }
    });

    var Workspace = Backbone.Router.extend({
        routes: {
            'subscription/new': 'new',
            '': 'index'
        },

        initialize: function() {
            this.tableView = new TableView({collection: window.subscriptions});
            this.addView = new AddView();
        },

        index: function() {
            $('#app').html(this.tableView.render().el);
        },

        'new': function() {
            var subscribed = window.subscriptions.map(function(subscription) {
                return subscription.get('publication').id;
            }) || [];

            var available = new PublicationCollection();
            window.publications.each(function(publication) {
                if (subscribed.indexOf(publication.get('id')) === -1) {
                    available.add(publication);
                }
            });

            if (available.length !== 0) {
                $('#app').html(this.addView.render(available).el);
            } else {
                alert(<?php echo json_encode(getGS("You have subscription for all available publications")); ?>);
                this.navigate('');
            }
        }
    });

    $(function() {
        window.subscriptions = new SubscriptionCollection(<?php echo json_encode(array_map(array($this, 'subscriptionJson'), $this->subscriptions)); ?>);
        window.publications = new PublicationCollection(<?php echo json_encode(array_map(function($publication) {
            return array(
                'id' => $publication->getId(),
                'name' => $publication->getName(),
                'languages' => array_map(function($language) {
                    return array(
                        'id' => $language->getId(),
                        'name' => $language->getName(),
                    );
                }, $publication->getLanguages()),
            );
        }, $this->publications)); ?>);
        window.router = new Workspace();
        Backbone.history.start();
    });
})(jQuery);
</script>

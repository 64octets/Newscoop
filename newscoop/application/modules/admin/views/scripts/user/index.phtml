<?php $this->placeholder('title')->captureStart(); ?>
<?php putGS('Users'); ?>
<?php $this->placeholder('title')->captureEnd(); ?>
<?php echo $this->renderActions(); ?>
<table cellpadding="0" cellspacing="0" border="0" class="display" id="foobar">
    <thead>
        <tr>
            <th rowspan="2">Username</th>
            <th rowspan="2">First Name</th>
            <th rowspan="2">Last Name</th>
            <th rowspan="2">Email</th>
            <th></th>
            <th></th>
            <th rowspan="2">Created</th>
            <th rowspan="2">Updated</th>
            <th></th>
        </tr>
        <tr>
            <th>Usertype</th>
            <th>Status</th>
            <th>Verified</th>
        </tr>
    </thead>
    <tbody>
        
    </tbody>
    <tfoot>
        <tr>
            <th>Username</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Usertype</th>
            <th>Status</th>
            <th>Created</th>
            <th>Updated</th>
            <th>Verified</th>
        </tr>
    </tfoot>
</table>

<script type="text/html" id="user-active-template">
<div class="inline-actions">
    <a href="#delete" class="delete" title="<?php putGS('delete user'); ?> <%= user.escape('username') %>"><?php putGS('Delete'); ?></a>
</div>
<a href="<%= user.getLink('edit') %>" class="edit" title="<?php putGS('edit user'); ?> <%= user.escape('username') %>"><%= user.escape('username') %>
<% if (user.get('is_verified')) { %><abbr title="<?php putGS('Verified profile'); ?>" class="verified">V</abbr><% } %>
</a>
<a href="mailto:<%= user.get('email') %>" class="mailto" title="<?php putGS('Send email to user:'); ?> <%= user.escape('username') %>"><%= user.get('email') %></a>
<span class="created"><%= user.get('created') %></span>
</script>

<script type="text/html" id="user-inactive-template">
<div class="inline-actions">
    <a href="#token" class="token" title="<?php putGS('send confirmation email'); ?>"><?php putGS('Send confirm email'); ?></a> |
    <a href="#delete" class="delete" title="<?php putGS('delete user'); ?> <%= user.escape('username') %>"><?php putGS('Delete'); ?></a>
</div>
<a class="edit"><%= user.escape('username') %></a>
<span class="agent"><abbr title="<%= user.escape('http_user_agent') %>"><%= user.get('http_user_agent') %></abbr></span>
<a href="mailto:<%= user.get('email') %>" class="mailto"><%= user.get('email') %></a>
<span class="created"><%= user.get('created') %></span>
</script>

<script type="text/html" id="user-deleted-template">
<a class="edit" href="<%= user.getLink('rename') %>"><%= user.escape('username') %></a>
<a class="mailto">&nbsp;</a>
<span class="created"><%= user.get('created') %> - <%= user.get('updated') %></span>
</script>

<script type="text/javascript" src="<?php echo $this->baseUrl('js/underscore.js'); ?>"></script>
<script type="text/javascript" src="<?php echo $this->baseUrl('js/backbone.js'); ?>"></script>
<script type="text/javascript" src="<?php echo $this->baseUrl('js/apps/users.js'); ?>"></script>
<script type="text/javascript">
(function($) {
/*
 * Function: fnGetColumnData
 * Purpose:  Return an array of table values from a particular column.
 * Returns:  array string: 1d data array 
 * Inputs:   object:oSettings - dataTable settings object. This is always the last argument past to the function
 *           int:iColumn - the id of the column to extract the data from
 *           bool:bUnique - optional - if set to false duplicated values are not filtered out
 *           bool:bFiltered - optional - if set to false all the table data is used (not only the filtered)
 *           bool:bIgnoreEmpty - optional - if set to false empty values are not filtered from the result array
 * Author:   Benedikt Forchhammer <b.forchhammer /AT\ mind2.de>
 */
$.fn.dataTableExt.oApi.fnGetColumnData = function ( oSettings, iColumn, bUnique, bFiltered, bIgnoreEmpty ) {
    // check that we have a column id
    if ( typeof iColumn == "undefined" ) return new Array();
    
    // by default we only wany unique data
    if ( typeof bUnique == "undefined" ) bUnique = true;
    
    // by default we do want to only look at filtered data
    if ( typeof bFiltered == "undefined" ) bFiltered = true;
    
    // by default we do not wany to include empty values
    if ( typeof bIgnoreEmpty == "undefined" ) bIgnoreEmpty = true;
    
    // list of rows which we're going to loop through
    var aiRows;
    
    // use only filtered rows
    if (bFiltered == true) aiRows = oSettings.aiDisplay; 
    // use all rows
    else aiRows = oSettings.aiDisplayMaster; // all row numbers

    // set up data array    
    var asResultData = new Array();
    
    for (var i=0,c=aiRows.length; i<c; i++) {
        iRow = aiRows[i];
        var aData = this.fnGetData(iRow);
        var sValue = aData[iColumn];
        
        // ignore empty values?
        if (bIgnoreEmpty == true && sValue.length == 0) continue;

        // ignore unique values?
        else if (bUnique == true && jQuery.inArray(sValue, asResultData) > -1) continue;
        
        // else push the value onto the result data array
        else asResultData.push(sValue);
    }
    
    return asResultData;
}}(jQuery));


function fnCreateSelect( aData )
{
    var r='<select><option value=""></option>', i, iLen=aData.length;
    for ( i=0 ; i<iLen ; i++ )
    {
        r += '<option value="'+aData[i]+'">'+aData[i]+'</option>';
    }
    return r+'</select>';
}

$(function() {
    window.translate = <?php echo json_encode(array(
        'No users found.' => getGS('No users found.'),
        'Are you sure you want to {action}?' => getGS('Are you sure you want to {action}?'),
        'New confirmation email was sent to user.' => getGS('New confirmation email was sent to user.'),
        'User was deleted.' => getGS('User was deleted.'),
    )); ?>;

    // var users = new UserCollection();
    // var list = new UserListView({collection: users, el: $('#user-list')});
    // var statusFilter = new StatusFilterView({collection: users, el: $('#status-filter')});
    // var pagination = new PaginationView({collection: users, el: $('#pagination')});
    // var selectFilter = new SelectFilterView({collection: users, el: $('#groups')});
    // var search = new SearchView({collection: users, el: $('#search-view')});
    // users.url = <?php echo json_encode($this->url(array('action' => 'index', 'format' => 'json'))); ?>;
    // users.reset(users.parse(<?php echo json_encode($this); ?>));
    $('#foobar').hide(); // hide the table so it doesn't look jaggy
    var oTable = $('#foobar').dataTable( {
        'oLanguage': {
            'oPaginate': {
                'sNext': '<?php putGS('Next'); ?>',
                'sPrevious': '<?php putGS('Previous'); ?>',
            },
            'sZeroRecords': '<?php putGS('No records found.'); ?>',
            'sSearch': '<?php putGS('Search'); ?>:',
            'sInfo': '<?php putGS('Showing _START_ to _END_ of _TOTAL_ entries'); ?>',
            'sEmpty': '<?php putGS('No entries to show'); ?>',
            'sInfoFiltered': '<?php putGS(' - filtering from _MAX_ records'); ?>',
            'sLengthMenu': '<?php putGS('Display _MENU_ records'); ?>',
            'sInfoEmpty': '',
        },
        // "bServerSide": true,
        "bProcessing": true,
        "bAutoWidth": true,
        "sPaginationType": "full_numbers",
        "bPaging": true,
        // ***
        // * This requires 1.9.0 as minimium
        // * This allows for styling (or something similar) based on COLUMN content.
        // ***
        // "aoColumnDefs": [ {
        //   "aTargets": [4],
        //   "fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {
        //     if (typeof sData == 'string') {
        //         if ( sData.indexOf("Admin") !== -1) {
        //           $(nTd).parent().css('font-weight', 'bold');
        //         }
        //     }
        //   }
        // } ],
        'bJQueryUI': true,
        "sDom": 'RCf<"clear">rtilp',
        "oColVis": {
            "aiExclude": [ 0 ]
        },
        "sAjaxSource": <?php echo json_encode($this->url(array('action' => 'table', 'format' => 'json'))); ?>,
        "fnServerData": function ( sSource, aoData, fnCallback ) {
            $.getJSON( sSource, aoData, function (json) { 
                var aaData = [];
                var totalRecords = json['users'].length;
                json['users'].forEach(function(user) {
                    var newUser = [];
                    for (var key in user) {
                        // console.log(key+': ');
                        // console.log(user[key]);
                        if (key != 'id') {
                            var string = user[key];
                            if (key == 'u') {
                                string = '<a href="/~twisted/newscoop/admin/user/edit/user/'+user['id']+'">'+ user['u'] + '</a>';
                            }
                            if (key == 'g') {
                                string = user[key].join(' / ');
                            }
                            if (key == 'e') {
                                string = '<a href="mailto:'+user['e']+'">'+user['e']+'</a>';
                            }
                            newUser.push(string);
                        }
                    }
                    aaData.push(newUser);
                });
                var newData = [];
                newData.aaData = aaData;
                newData.iTotalRecords = totalRecords;
                fnCallback(newData);
                setTimeout( function () {
                    $("thead th").each( function ( i ) {
                        // var val = $(this).val();
                        // if (val.indexOf('/') !== -1) {
                        //     var arr = val.split(' / ');
                        //     console.log(arr);
                        // }
                        // console.log(i+':');
                        // console.log(oTable.fnGetColumnData(i));
                        if (i == 4) {
                            var columnData = oTable.fnGetColumnData(i);
                            // console.log(columnData);
                            var xArr = [];
                            columnData.forEach(function(x) {
                                // console.log(x);
                                // console.log(x.split(' / '));
                                x.split(' / ').forEach(function (xRole) {
                                    // console.log(xRole);
                                    if ($.inArray(xRole, xArr) === -1) {
                                        xArr.push(xRole);
                                    }
                                });
                            });
                            // console.log(xArr);
                            this.innerHTML = fnCreateSelect( xArr );
                        } else if (i == 5 || i == 8) {
                            this.innerHTML = fnCreateSelect( oTable.fnGetColumnData(i) );
                        }
                        $('select', this).change( function () {
                            oTable.fnFilter( $(this).val() , i );
                        } );
                    } );
                    oTable.fnSetColumnVis( 5, false );
                    oTable.fnSetColumnVis( 6, false );
                    oTable.fnSetColumnVis( 7, false );
                    oTable.fnSetColumnVis( 8, false );
                    $('#foobar').show();
                }, 0 );
            });
        }
    } );

});
</script>

<script type="text/javascript" src="https://www.google.com/jsapi"></script>
<script type="text/javascript">
    // Load the Visualization API and the piechart package.
    google.load('visualization', '1.0', {'packages':['corechart']});

    // Set a callback to run when the Google Visualization API is loaded.
    google.setOnLoadCallback(drawChart);

    // Callback that creates and populates a data table,
    // instantiates the pie chart, passes in the data and
    // draws it.
    function drawChart() {

        // Create the data table.
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Type');
        data.addColumn('number', 'Users');
        data.addRows([
            ['Newscoop', <?php echo $this->newscoopLoginCount; ?>],
            ['Facebook', <?php echo $this->facebookLoginCount; ?>]
        ]);

        // Set chart options
        var options = {
            'title':<?php echo json_encode(getGS('Active Logins')); ?>,
            'width':180,
            'height':180,
            'legend': {
                'position': 'bottom'
            }
        };

        // Instantiate and draw our chart, passing in some options.
        var chart = new google.visualization.PieChart(document.getElementById('chart'));
        chart.draw(data, options);
    }
</script>